<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>
   <!-- <parent> -->
   <!-- <groupId>org.springframework.boot</groupId> -->
   <!-- <artifactId>spring-boot-starter-parent</artifactId> -->
   <!-- <version>2.3.0.RELEASE</version> -->
   <!-- lookup parent from repository -->
   <!-- <relativePath /> -->
   <!-- </parent> -->
   <groupId>org.opennms.integration.asyncapi</groupId>
   <artifactId>async-api-openapi-model-java</artifactId>
   <version>0.0.1-SNAPSHOT</version>
   <packaging>jar</packaging>
   <name>demo</name>
   <description>Demo project for java</description>

   <properties>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

      <java.version>1.8</java.version>
      <maven.compiler.source>${java.version}</maven.compiler.source>
      <maven.compiler.target>${java.version}</maven.compiler.target>

      <!-- for gson okhttp -->
      <gson-fire-version>1.8.5</gson-fire-version>
      <swagger-annotations-version>1.6.6</swagger-annotations-version>
      <okhttp-version>4.10.0</okhttp-version>
      <gson-version>2.9.1</gson-version>
      <commons-lang3-version>3.12.0</commons-lang3-version>
      <jackson-databind-nullable-version>0.2.6</jackson-databind-nullable-version>
      <jakarta-annotation-version>1.3.5</jakarta-annotation-version>
      <junit-version>5.9.1</junit-version>
      <junit-platform-runner.version>1.9.1</junit-platform-runner.version>
      <mockito-core-version>3.12.4</mockito-core-version>
      <javax.ws.rs-api-version>2.1.1</javax.ws.rs-api-version>
      <jsr311-api-version>1.1.1</jsr311-api-version>
      <spotless.version>2.27.2</spotless.version>


      <slf4jVersion>1.7.36</slf4jVersion>
      <log4j2Version>2.18.0</log4j2Version>


      <!-- for jersey client -->
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
      <swagger-annotations-version>1.6.6</swagger-annotations-version>
      <jersey-version>2.35</jersey-version>
      <jackson-version>2.13.4</jackson-version>
      <jackson-databind-version>2.13.4.2</jackson-databind-version>
      <jackson-databind-nullable-version>0.2.6</jackson-databind-nullable-version>
      <jakarta-annotation-version>1.3.5</jakarta-annotation-version>
      <junit-version>5.8.2</junit-version>
      <spotless.version>2.21.0</spotless.version>

      <TMF925basePackage>org.opennms.integration.tmf925.openapi</TMF925basePackage>

   </properties>

   <dependencies>
      <!-- @Nullable annotation -->
      <dependency>
         <groupId>com.google.code.findbugs</groupId>
         <artifactId>jsr305</artifactId>
         <version>3.0.2</version>
      </dependency>
      <dependency>
         <groupId>com.squareup.okhttp3</groupId>
         <artifactId>okhttp</artifactId>
         <version>${okhttp-version}</version>
      </dependency>
      <dependency>
         <groupId>com.squareup.okhttp3</groupId>
         <artifactId>logging-interceptor</artifactId>
         <version>${okhttp-version}</version>
      </dependency>
      <dependency>
         <groupId>com.google.code.gson</groupId>
         <artifactId>gson</artifactId>
         <version>${gson-version}</version>
      </dependency>
      <dependency>
         <groupId>io.gsonfire</groupId>
         <artifactId>gson-fire</artifactId>
         <version>${gson-fire-version}</version>
      </dependency>
      <dependency>
         <groupId>org.apache.commons</groupId>
         <artifactId>commons-lang3</artifactId>
         <version>${commons-lang3-version}</version>
      </dependency>
      <dependency>
         <groupId>jakarta.annotation</groupId>
         <artifactId>jakarta.annotation-api</artifactId>
         <version>${jakarta-annotation-version}</version>
         <scope>provided</scope>
      </dependency>
      <dependency>
         <groupId>org.openapitools</groupId>
         <artifactId>jackson-databind-nullable</artifactId>
         <version>${jackson-databind-nullable-version}</version>
      </dependency>

      <!-- <dependency> -->
      <!-- <groupId>javax.ws.rs</groupId> -->
      <!-- <artifactId>jsr311-api</artifactId> -->
      <!-- <version>${jsr311-api-version}</version> -->
      <!-- </dependency> -->
      <dependency>
         <groupId>javax.ws.rs</groupId>
         <artifactId>javax.ws.rs-api</artifactId>
         <version>${javax.ws.rs-api-version}</version>
      </dependency>
      <!-- test dependencies -->
      <!-- <dependency> -->
      <!-- <groupId>org.junit.jupiter</groupId> -->
      <!-- <artifactId>junit-jupiter-engine</artifactId> -->
      <!-- <version>${junit-version}</version> -->
      <!-- <scope>test</scope> -->
      <!-- </dependency> -->
      <!-- <dependency> -->
      <!-- <groupId>org.junit.platform</groupId> -->
      <!-- <artifactId>junit-platform-runner</artifactId> -->
      <!-- <version>${junit-platform-runner.version}</version> -->
      <!-- <scope>test</scope> -->
      <!-- </dependency> -->
      <dependency>
         <groupId>org.mockito</groupId>
         <artifactId>mockito-core</artifactId>
         <version>${mockito-core-version}</version>
         <scope>test</scope>
      </dependency>


      <!-- for jersey client -->

      <!-- @Nullable annotation -->
      <dependency>
         <groupId>com.google.code.findbugs</groupId>
         <artifactId>jsr305</artifactId>
         <version>3.0.2</version>
      </dependency>

      <!-- HTTP client: jersey-client -->
      <dependency>
         <groupId>org.glassfish.jersey.core</groupId>
         <artifactId>jersey-client</artifactId>
         <version>${jersey-version}</version>
      </dependency>
      <dependency>
         <groupId>org.glassfish.jersey.inject</groupId>
         <artifactId>jersey-hk2</artifactId>
         <version>${jersey-version}</version>
      </dependency>
      <dependency>
         <groupId>org.glassfish.jersey.media</groupId>
         <artifactId>jersey-media-multipart</artifactId>
         <version>${jersey-version}</version>
      </dependency>
      <dependency>
         <groupId>org.glassfish.jersey.media</groupId>
         <artifactId>jersey-media-json-jackson</artifactId>
         <version>${jersey-version}</version>
      </dependency>

      <!-- JSON processing: jackson -->
      <dependency>
         <groupId>com.fasterxml.jackson.core</groupId>
         <artifactId>jackson-core</artifactId>
         <version>${jackson-version}</version>
      </dependency>
      <dependency>
         <groupId>com.fasterxml.jackson.core</groupId>
         <artifactId>jackson-annotations</artifactId>
         <version>${jackson-version}</version>
      </dependency>
      <dependency>
         <groupId>com.fasterxml.jackson.core</groupId>
         <artifactId>jackson-databind</artifactId>
         <version>${jackson-databind-version}</version>
      </dependency>
      <dependency>
         <groupId>org.openapitools</groupId>
         <artifactId>jackson-databind-nullable</artifactId>
         <version>${jackson-databind-nullable-version}</version>
      </dependency>
      <dependency>
         <groupId>com.fasterxml.jackson.datatype</groupId>
         <artifactId>jackson-datatype-jsr310</artifactId>
         <version>${jackson-version}</version>
      </dependency>
      <dependency>
         <groupId>jakarta.annotation</groupId>
         <artifactId>jakarta.annotation-api</artifactId>
         <version>${jakarta-annotation-version}</version>
         <scope>provided</scope>
      </dependency>
      <dependency>
         <groupId>org.glassfish.jersey.connectors</groupId>
         <artifactId>jersey-apache-connector</artifactId>
         <version>${jersey-version}</version>
      </dependency>

      <dependency>
         <groupId>org.slf4j</groupId>
         <artifactId>slf4j-api</artifactId>
         <version>${slf4jVersion}</version>
      </dependency>
      <dependency>
         <groupId>org.apache.logging.log4j</groupId>
         <artifactId>log4j-slf4j-impl</artifactId>
         <version>${log4j2Version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.logging.log4j</groupId>
         <artifactId>log4j-core</artifactId>
         <version>${log4j2Version}</version>
         <scope>test</scope>
      </dependency>


      <!-- test dependencies -->
      <dependency>
         <groupId>org.junit.jupiter</groupId>
         <artifactId>junit-jupiter-api</artifactId>
         <version>${junit-version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.junit.jupiter</groupId>
         <artifactId>junit-jupiter-engine</artifactId>
         <version>${junit-version}</version>
         <scope>test</scope>
      </dependency>

      <!-- not using junit 5 version so tests can be juit4 -->
      <dependency>
         <groupId>org.instancio</groupId>
         <artifactId>instancio-core</artifactId>
         <version>2.13.0</version>
         <scope>test</scope>
         <exclusions>
            <exclusion>
               <groupId>org.slf4j</groupId>
               <artifactId>slf4j-api</artifactId>
            </exclusion>
         </exclusions>
      </dependency>


   </dependencies>


   <build>
      <resources>
         <resource>
            <directory>src/main/resources</directory>
         </resource>
      </resources>
      <testResources>
         <testResource>
            <directory>src/test/resources</directory>
         </testResource>
         <testResource>
            <directory>target/json</directory>
         </testResource>
      </testResources>

      <plugins>
         <!-- <plugin> -->
         <!-- <groupId>org.springframework.boot</groupId> -->
         <!-- <artifactId>spring-boot-maven-plugin</artifactId> -->
         <!-- </plugin> -->

         <plugin>
            <groupId>org.openapitools</groupId>
            <artifactId>openapi-generator-maven-plugin</artifactId>

            <!-- changed from 4.3.1 -->
            <version>6.5.0</version>
            <!-- <version>4.3.1</version> -->
            <!-- <version>4.2.0</version> -->
            <executions>
<!--               <execution>-->
                  
<!--                  <id>generate zomzog example</id>-->
<!--                  <goals>-->
<!--                     <goal>generate</goal>-->
<!--                  </goals>-->
<!--                  <configuration>-->
<!--                     <inputSpec>src/main/resources/api/api.yml</inputSpec>-->
<!--                     <generatorName>java</generatorName>-->
<!--                     <configOptions>-->
<!--                        <sourceFolder>src/gen/java/main</sourceFolder>-->
<!--                        <interfaceOnly>false</interfaceOnly>-->
<!--                        <delegatePattern>true</delegatePattern>-->

<!--                        <library>jersey2</library>-->
<!--                         <library>okhttp-gson</library> -->
<!--                     </configOptions>-->
<!--                     <modelPackage>bzh.zomzog.demo.openapiinheritance.domain.api</modelPackage>-->
<!--                     <apiPackage>bzh.zomzog.demo.openapiinheritance.controller.api</apiPackage>-->
<!--                     <generateSupportingFiles>true</generateSupportingFiles>-->
<!--                  </configuration>-->
<!--               </execution>-->
<!--               <execution>-->
<!--                  <id>generate java example</id>-->
<!--                  <goals>-->
<!--                     <goal>generate</goal>-->
<!--                  </goals>-->
<!--                  <configuration>-->
<!--                     <inputSpec>src/main/resources/api/petstore-openapi.yaml</inputSpec>-->
<!--                     <generatorName>java</generatorName>-->
<!--                     <configOptions>-->
<!--                        <sourceFolder>src/gen/java/main</sourceFolder>-->
<!--                        <interfaceOnly>false</interfaceOnly>-->
<!--                        <delegatePattern>true</delegatePattern>-->

<!--                         <useOneOfInterfaces>false</useOneOfInterfaces> -->
<!--                         <addOneOfInterfaceImports>false</addOneOfInterfaceImports> -->
<!--                         <additionalOneOfTypeAnnotations>false</additionalOneOfTypeAnnotations> -->

<!--                        <library>jersey2</library>-->
<!--                         <library>okhttp-gson</library> -->

<!--                     </configOptions>-->
<!--                     <modelPackage>org.spring.openapioneofexample.domain.api</modelPackage>-->
<!--                     <apiPackage>org.spring.openapioneofexample.controller.api</apiPackage>-->
<!--                     <invokerPackage>org.spring.openapioneofexample.controller.api.invoker</invokerPackage>-->

<!--                     <generateSupportingFiles>true</generateSupportingFiles>-->
<!--                  </configuration>-->
<!--               </execution>-->
               <execution>
                  <id>generate tt example</id>
                  <goals>
                     <goal>generate</goal>
                  </goals>
                  <configuration>
                     <!-- do not use basedir in file ref - it causes url exception on windows -->
                     <inputSpec>
                        src/main/resources/api/TMF925-TroubleTicket-asyncapi-id-oneoff-openapi-raw.yml</inputSpec>
                     <generatorName>java</generatorName>
                     <configOptions>
                        <sourceFolder>src/gen/java/main</sourceFolder>
                        <interfaceOnly>false</interfaceOnly>
                        <delegatePattern>true</delegatePattern>

                        <library>jersey2</library>
                        <!-- <library>okhttp-gson</library> -->

                        <!-- <useOneOfInterfaces>true</useOneOfInterfaces> -->
                        <!-- <addOneOfInterfaceImports>true</addOneOfInterfaceImports> -->
                        <!-- <additionalOneOfTypeAnnotations>true</additionalOneOfTypeAnnotations> -->

                        <!-- <generateSupportingFiles>true</generateSupportingFiles> -->
                     </configOptions>

                     <apiPackage>${TMF925basePackage}.api</apiPackage>
                     <modelPackage>${TMF925basePackage}.model</modelPackage>
                     <invokerPackage>${TMF925basePackage}.invoker</invokerPackage>
                     <generateSupportingFiles>true</generateSupportingFiles>

                     <!-- todo remove -->
                     <skipValidateSpec>false</skipValidateSpec>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <version>3.3.0</version>
            <executions>
               <execution>
                  <id>add-source</id>
                  <!-- <phase>generate-sources</phase> -->
                  <phase>initialize</phase>
                  <goals>
                     <goal>add-source</goal>
                  </goals>
                  <configuration>
                     <sources>
                        <source>
                           ${project.build.directory}/generated-sources/openapi/src/gen/java/main</source>
                     </sources>
                  </configuration>
               </execution>
               <execution>
                  <id>add-test-source</id>
                  <!-- <phase>generate-test-sources</phase> -->
                  <phase>initialize</phase>
                  <goals>
                     <goal>add-test-source</goal>
                  </goals>
                  <configuration>
                     <sources>
                        <source>
                           ${project.build.directory}/generated-sources/openapi/src/test/java</source>
                     </sources>
                  </configuration>
               </execution>
<!--                <execution> -->
<!--                   <id>add-resource</id> -->
<!--                   <phase>initialize</phase> -->
<!--                   <goals> -->
<!--                      <goal>add-resource</goal> -->
<!--                   </goals> -->
<!--                   <configuration> -->
<!--                      <resources> -->

<!--                      </resources> -->
<!--                   </configuration> -->
<!--                </execution> -->
<!--                <execution> -->
<!--                   <id>add-test-resource</id> -->
<!--                   <phase>initialize</phase> -->
<!--                   <goals> -->
<!--                      <goal>add-test-resource</goal> -->
<!--                   </goals> -->
<!--                   <configuration> -->
<!--                      <resources> -->
<!--                         <resource> -->
<!--                            <directory>${project.build.directory}/test-classes/json/*.json</directory> -->
<!--                         </resource> -->
<!--                      </resources> -->
<!--                   </configuration> -->
<!--                </execution> -->
            </executions>
         </plugin>

         <plugin>
            <groupId>com.google.code.maven-replacer-plugin</groupId>
            <artifactId>replacer</artifactId>
            <version>1.5.2</version>
            <executions>
               <execution>
                  <phase>generate-test-sources</phase>
                  <id>add class header annotations</id>
                  <goals>
                     <goal>replace</goal>
                  </goals>
                  <configuration>
                     <includes>
                        <include>target/generated-sources/openapi/src/test/java/**/*.java</include>
                     </includes>
                  
                     <replacements>
                        <replacement>
                           <token>public class </token>
                           <value><![CDATA[
@org.junit.jupiter.api.TestMethodOrder(org.junit.jupiter.api.MethodOrderer.OrderAnnotation.class)
public class ]]></value>
                        </replacement>
                     </replacements>
                  </configuration>
               </execution>

               <execution>
                  <id>add test methods</id>
                  <phase>generate-test-sources</phase>
                  <goals>
                     <goal>replace</goal>
                  </goals>
                  <configuration>
                     <includes>
                        <include>target/generated-sources/openapi/src/test/java/**/*.java</include>
                     </includes>
                     <replacements>
                        <replacement>
                           <token>private final (.*) model = new (.*);</token>
                           <value><![CDATA[
    private static final  org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger($1.class);

    $1 model = org.instancio.Instancio.of($1.class).create();

	java.io.InputStream src = null;

	/**
	 * Modify this before method to pull in your test case
     * For your own real example message tests make sure src file path points to example data and not generated data
     * if class loader uses the test class (class.getResourceAsStream), 
     * the classloader will start search for file relative to the directory of the class
	 */
	@org.junit.jupiter.api.BeforeEach
    public void before() {

        // will load from classpath relative to referenced class
		// src = $1PayloadExampleTest.class.getResourceAsStream("$1Example.json"); 

        // will load from generated random data json file
        java.io.File f = new java.io.File("target/json/$1.json");
        if(f.exists()) try {
            src = new java.io.FileInputStream(f);
            Assertions.assertNotNull(src);
        } catch (Exception e) {
            LOG.error("cannot load test data",e);
        }
		
        // inject model instance if required to make the class creation work
        // XXX actualInstance = org.instancio.Instancio.of(XXX.class).create();
        // model.setActualInstance(actualInstance);

    }


    /**
    * BASIC TESTS INJECTED TO OPENAPI GENERATED CODE BY MAVEN BUILD IN TARGET DIRECTORY
    * YOU MAY NEED TO EXCLUDE GENERATED TESTS IF MODEL IS NOT POPULATED PROPERLY BY EXTANTIO
    * COPY AND MODIFY THESE TESTS IN YOUR PROJECT
    */
    
    /**
    * simple test that we can write the randomly populated json model object
    */
    @Test
    @org.junit.jupiter.api.Order(1)
    public void simple$1Test() {
        ${TMF925basePackage}.invoker.JSON json = new ${TMF925basePackage}.invoker.JSON();
        String jsonString = null;
        java.io.FileWriter fileWriter = null;
		LOG.debug("check we create a randomly populated object and serialise it to a file");
        try {
            jsonString = json.getMapper().writerWithDefaultPrettyPrinter().writeValueAsString(model);
            LOG.debug("serialised object: \n" + jsonString);

            java.io.File f  = new java.io.File("target/json/$1.json");
            f.getParentFile().mkdirs(); 
            f.createNewFile();
            fileWriter = new java.io.FileWriter(f);
            fileWriter.write(jsonString);
            fileWriter.close();
        } catch (Exception e) {
            LOG.error("problem serialising object",e);
        } finally {
            if (fileWriter!=null)
                try {
                    fileWriter.close();
                } catch (Exception ex) {
                }
        }
    }


	/**
	 * Model tests for $1 with simple ObjectMapper
     * For your own real example message tests make sure src file path points to example data and not generated data
     * if class loader uses the test class (class.getResourceAsStream), 
     * the classloader will start search for file relative to the directory of the class
	 */
	@Test
    @org.junit.jupiter.api.Order(2)
	public void testModel$1SimpleMapper() {
		${TMF925basePackage}.invoker.JSON json = new ${TMF925basePackage}.invoker.JSON();

		// check we can parse json file to simple json model
		LOG.debug("check we can parse example json file to simple json model");
		try {

            Assertions.assertNotNull(src);
			
			com.fasterxml.jackson.databind.ObjectMapper mapper = new com.fasterxml.jackson.databind.ObjectMapper();

			com.fasterxml.jackson.databind.JsonNode rootNode = mapper.readTree(src);
			String str = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(rootNode);
			LOG.debug("simple json payload: \n" + str);

            src.close();
		} catch (Exception e) {
        	LOG.error("problem parsing json example to JsonNode",e);
		} finally {
			try {
				if (src != null)
					src.close();
			} catch (Exception ex) {
			}
		}
	}
	
	@Test
    @org.junit.jupiter.api.Order(3)
	public void testModel$1() {
		org.opennms.integration.tmf925.openapi.invoker.JSON json = new org.opennms.integration.tmf925.openapi.invoker.JSON();

		LOG.debug("check we can parse example json file to correct model object");
		try {

            Assertions.assertNotNull(src);

			$1 obj = json.getMapper().readValue(src, $1.class);

			String jsonString = null;
			jsonString = json.getMapper().writerWithDefaultPrettyPrinter().writeValueAsString(obj);
			LOG.debug("serialised object after parsing: \n" + jsonString);
		} catch (Exception e) {
        	LOG.error("problem parsing json example to model object",e);
		} finally {
			try {
				if (src != null)
					src.close();
			} catch (Exception ex) {
			}
		}
	}
   
    /**
    * TEST STUBBS CREATED BY OPENAPI GENERATOR
    */

                                   ]]></value>
                        </replacement>
                     </replacements>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>3.0.0-M5</version>
            <configuration>
<!--               <forkCount>0</forkCount> -->
<!--               <argLine>-Xmx1024m -XX:MaxPermSize=256m</argLine>-->
               <excludes>
                  <!-- tests excuded from automatic test because they need oneof instances to be defined -->
                  <exclude>**/model/CreateTroubleTicketResponsePayloadTest.java</exclude>
                  <exclude>**/model//DeleteTroubleTicketResponsePayloadTest.java</exclude>
                  <exclude>**/model/ListTroubleTicketResponsePayloadTest.java</exclude>
                  <exclude>**/model/PatchTroubleTicketResponsePayloadTest.java</exclude>
                  <exclude>**/model/RetrieveTroubleTicketResponsePayloadTest.java</exclude>
                  <exclude>**/model/TroubleTicketNotificationPayloadTest.java</exclude>
               </excludes>
            </configuration>
            <dependencies>
               <dependency>
                  <groupId>org.junit.jupiter</groupId>
                  <artifactId>junit-jupiter-engine</artifactId>
                  <version>5.9.1</version>
               </dependency>
            </dependencies>
         </plugin>

      </plugins>

      <pluginManagement>
         <!-- this plugin just allows the project to load in eclipse without execution errors -->
         <!-- <plugins> -->
         <!-- <plugin> -->
         <!-- <groupId>org.eclipse.m2e</groupId> -->
         <!-- <artifactId>lifecycle-mapping</artifactId> -->
         <!-- <version>1.0.0</version> -->
         <!-- <configuration> -->
         <!-- <lifecycleMappingMetadata> -->
         <!-- <pluginExecutions> -->
         <!-- <pluginExecution> -->
         <!-- <pluginExecutionFilter> -->
         <!-- <groupId>org.openapitools</groupId> -->
         <!-- <artifactId>openapi-generator-maven-plugin</artifactId> -->
         <!-- <versionRange>[1.0,)</versionRange> -->
         <!-- <goals> -->
         <!-- <goal>generate</goal> -->
         <!-- <goal>generate-sources</goal> -->
         <!-- </goals> -->
         <!-- </pluginExecutionFilter> -->
         <!-- <action> -->
         <!-- <execute /> -->
         <!-- </action> -->
         <!-- </pluginExecution> -->
         <!-- <pluginExecution> -->
         <!-- <pluginExecutionFilter> -->
         <!-- <groupId>org.codehaus.mojo</groupId> -->
         <!-- <artifactId>exec-maven-plugin</artifactId> -->
         <!-- <versionRange>[1.0,)</versionRange> -->
         <!-- <goals> -->
         <!-- <goal>exec</goal> -->
         <!-- </goals> -->
         <!-- </pluginExecutionFilter> -->
         <!-- <action> -->
         <!-- <execute /> -->
         <!-- </action> -->
         <!-- </pluginExecution> -->
         <!-- <pluginExecution> -->
         <!-- <pluginExecutionFilter> -->
         <!-- <groupId>org.codehaus.mojo</groupId> -->
         <!-- <artifactId>build-helper-maven-plugin</artifactId> -->
         <!-- <version>[3.0,)</version> -->
         <!-- <goals> -->
         <!-- <goal>add-source</goal> -->
         <!-- <goal>add-test-source</goal> -->
         <!-- </goals> -->
         <!-- </pluginExecutionFilter> -->
         <!-- <action> -->
         <!-- <execute /> -->
         <!-- </action> -->
         <!-- </pluginExecution> -->
         <!-- </pluginExecutions> -->
         <!-- </lifecycleMappingMetadata> -->
         <!-- </configuration> -->
         <!-- </plugin> -->
         <!-- </plugins> -->
      </pluginManagement>

   </build>

</project>
